"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _asyncIterator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncIterator"));

var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));

var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));

var _gatsbySourceFilesystem = require("gatsby-source-filesystem");

var _utils = require("./utils");

var ComponentNodeTypes = new Set(['PloneBreadcrumbs', 'PloneNavigation']);
var DownloadableContentTypes = new Set(['Image', 'File']); // TODO: Make DownloadableContentTypes configurable
// Make gatsby node from Plone REST API data

var makeContentNode = function makeContentNode(id, data, baseUrl, backlinks) {
  // mediaType is always set as 'text/html' as a common case, because
  // content objects may have html, images, files or combinations of them
  var node = (0, _objectSpread2.default)({}, data, {
    id: id,
    internal: {
      contentDigest: (0, _utils.createContentDigest)(data),
      mediaType: 'text/html'
    }
  });

  if (id === baseUrl) {
    // Node at baseUrl is always created as PloneSite node
    node.internal.type = 'PloneSite';
  } else {
    // Node types are 'Plone'-prefixed content types without white spaces
    node.internal.type = (0, _utils.normalizeType)(node._type);
  } // Add array of backlinks to support GraphQL queries for related nodes


  if (!backlinks.has(node._path)) {
    // Create a new container, with a value to ensure it is never dropped
    backlinks.set(node._path, ['']);
    node._backlinks = backlinks.get(node._path);
  } else {
    // Merge with the already found backlinks
    node._backlinks = backlinks.get(node._path);
  } // Link image and file items to their containers to support download links


  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = (node.items || [])[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var item = _step4.value;

      if (DownloadableContentTypes.has(item._type)) {
        if (!backlinks.has(item._path)) {
          backlinks.set(item._path, [node._path]);
        } else {
          backlinks.get(item._path).push(node._path);
        }
      }
    } // Transform HTML string into serialized React tree

  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
        _iterator4.return();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  if (node.text) {
    if (node.text['content-type'] === 'text/html') {
      node.text.react = (0, _utils.parseHTMLtoReact)(node.text.data, baseUrl, node._path, backlinks);
    }
  } // On 'Collection', remove 'query' field to hide GraphQL warnings


  if (node._type === 'Collection') {
    delete node.query;
  } // TODO: Recognize query fields from any content type


  return node;
};

var makeNavigationNode = function makeNavigationNode(id, data, path) {
  return (0, _objectSpread2.default)({}, data, {
    id: id,
    internal: {
      contentDigest: (0, _utils.createContentDigest)(data),
      mediaType: 'application/json',
      type: 'PloneNavigation'
    },
    _path: path
  });
};

var makeBreadcrumbsNode = function makeBreadcrumbsNode(id, data, path) {
  return (0, _objectSpread2.default)({}, data, {
    id: id,
    internal: {
      contentDigest: (0, _utils.createContentDigest)(data),
      mediaType: 'application/json',
      type: 'PloneBreadcrumbs'
    },
    _path: path
  });
}; // Generator to yield the supported nodes for a single Plone content object


var ploneNodeGenerator =
/*#__PURE__*/
function () {
  var _ref = (0, _wrapAsyncGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(id, token, baseUrl, expansions, backlinks) {
    var data;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = _utils.normalizeData;
            _context.next = 3;
            return (0, _awaitAsyncGenerator2.default)((0, _utils.fetchPlone)(id, token, {
              expand: Array.from(new Set((expansions || []).concat(['breadcrumbs', 'navigation']))).join(),
              // TODO: Higher depth results in "conflicting field types in your data"
              'expand.navigation.depth': 1
            }));

          case 3:
            _context.t1 = _context.sent;
            _context.t2 = baseUrl;
            data = (0, _context.t0)(_context.t1, _context.t2);
            _context.next = 8;
            return makeContentNode(id, data, baseUrl, backlinks);

          case 8:
            if (!(data._components && data._components.breadcrumbs)) {
              _context.next = 11;
              break;
            }

            _context.next = 11;
            return makeBreadcrumbsNode("".concat(id, "/@breadcrumbs"), data._components.breadcrumbs, data._path);

          case 11:
            if (!(data._components && data._components.navigation)) {
              _context.next = 14;
              break;
            }

            _context.next = 14;
            return makeNavigationNode("".concat(id, "/@navigation"), data._components.navigation, data._path);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function ploneNodeGenerator(_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}(); // Fetch only breadcrumbs component node


var fetchPloneBreadcrumbsNode =
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2(id, token, baseUrl) {
    var data;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.t0 = _utils.normalizeData;
            _context2.next = 3;
            return (0, _utils.fetchPlone)("".concat(id, "/@breadcrumbs"), token);

          case 3:
            _context2.t1 = _context2.sent;
            _context2.t2 = baseUrl;
            data = (0, _context2.t0)(_context2.t1, _context2.t2);
            return _context2.abrupt("return", makeBreadcrumbsNode("".concat(id, "/@breadcrumbs"), data, data._path.split('@breadcrumbs')[0]));

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function fetchPloneBreadcrumbsNode(_x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}(); // Fetch only navigation component node


var fetchPloneNavigationNode =
/*#__PURE__*/
function () {
  var _ref3 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee3(id, token, baseUrl) {
    var data;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.t0 = _utils.normalizeData;
            _context3.next = 3;
            return (0, _utils.fetchPlone)("".concat(id, "/@navigation"), token, {
              // TODO: Higher depth results in "conflicting field types in your data"
              'expand.navigation.depth': 1
            });

          case 3:
            _context3.t1 = _context3.sent;
            _context3.t2 = baseUrl;
            data = (0, _context3.t0)(_context3.t1, _context3.t2);
            return _context3.abrupt("return", makeNavigationNode("".concat(id, "/@navigation"), data, data._path.split('@navigation')[0]));

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function fetchPloneNavigationNode(_x9, _x10, _x11) {
    return _ref3.apply(this, arguments);
  };
}(); // GatsbyJS source plugin for Plone


exports.sourceNodes =
/*#__PURE__*/
function () {
  var _ref6 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee4(_ref4, _ref5) {
    var actions, cache, getNode, getNodes, store, baseUrl, token, searchParams, expansions, logLevel, createNode, deleteNode, setPluginStatus, touchNode, state, newState, logger, plone, backlinks, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, item, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, node, nodesById, updateNodes, updateParents, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _item, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, _node, _iteratorNormalCompletion9, _didIteratorError9, _iteratorError9, _iterator9, _step9, id, child, dirtyBreadcrumbs, dirtyNavigation, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, _item2, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, _node2, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, _node3, _iteratorNormalCompletion10, _didIteratorError10, _iteratorError10, _iterator10, _step10, _id;

    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            actions = _ref4.actions, cache = _ref4.cache, getNode = _ref4.getNode, getNodes = _ref4.getNodes, store = _ref4.store;
            baseUrl = _ref5.baseUrl, token = _ref5.token, searchParams = _ref5.searchParams, expansions = _ref5.expansions, logLevel = _ref5.logLevel;
            createNode = actions.createNode, deleteNode = actions.deleteNode, setPluginStatus = actions.setPluginStatus, touchNode = actions.touchNode;
            state = {}, newState = {
              lastFetched: new Date()
            };
            logger = _utils.logging.getLogger(_utils.logging[logLevel] || 100);
            logger.info('Reading plugin status');

            if (store.getState().status.plugins && store.getState().status.plugins['gatsby-source-plone']) {
              state = store.getState().status.plugins['gatsby-source-plone'];
            }

            logger.debug(JSON.stringify(state)); // Normalize baseUrl into form without ending slash

            baseUrl = baseUrl.replace(/\/+$/, '');
            logger.info('Fetching all metadata');
            _context4.t0 = _utils.normalizeData;
            _context4.next = 13;
            return (0, _utils.fetchPlone)("".concat(baseUrl, "/@search"), token, // Search nodes in path order to ensure parents before their children
            (0, _objectSpread2.default)({}, searchParams, {
              metadata_fields: 'modified',
              sort_on: 'path',
              sort_order: 'ascending'
            }));

          case 13:
            _context4.t1 = _context4.sent;
            _context4.t2 = baseUrl;
            plone = (0, _context4.t0)(_context4.t1, _context4.t2);

            // Ensure that items include baseUrl
            if (!plone.items.length || plone.items[0]._id !== baseUrl) {
              plone.items.unshift({
                _id: baseUrl
              });
            } // Define shared backlinks container to collect links between nodes


            backlinks = new Map();

            if (state.lastFetched) {
              _context4.next = 86;
              break;
            }

            logger.info('Creating all nodes');
            _iteratorNormalCompletion5 = true;
            _didIteratorError5 = false;
            _iteratorError5 = undefined;
            _context4.prev = 23;
            _iterator5 = plone.items[Symbol.iterator]();

          case 25:
            if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
              _context4.next = 70;
              break;
            }

            item = _step5.value;
            _context4.prev = 27;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context4.prev = 30;
            _iterator = (0, _asyncIterator2.default)(ploneNodeGenerator(item._id, token, baseUrl, expansions, backlinks));

          case 32:
            _context4.next = 34;
            return _iterator.next();

          case 34:
            _step = _context4.sent;
            _iteratorNormalCompletion = _step.done;
            _context4.next = 38;
            return _step.value;

          case 38:
            _value = _context4.sent;

            if (_iteratorNormalCompletion) {
              _context4.next = 46;
              break;
            }

            node = _value;
            logger.info("Creating node \u2013 ".concat(node.id.replace(baseUrl, '') || '/'));
            createNode(node);

          case 43:
            _iteratorNormalCompletion = true;
            _context4.next = 32;
            break;

          case 46:
            _context4.next = 52;
            break;

          case 48:
            _context4.prev = 48;
            _context4.t3 = _context4["catch"](30);
            _didIteratorError = true;
            _iteratorError = _context4.t3;

          case 52:
            _context4.prev = 52;
            _context4.prev = 53;

            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {
              _context4.next = 57;
              break;
            }

            _context4.next = 57;
            return _iterator.return();

          case 57:
            _context4.prev = 57;

            if (!_didIteratorError) {
              _context4.next = 60;
              break;
            }

            throw _iteratorError;

          case 60:
            return _context4.finish(57);

          case 61:
            return _context4.finish(52);

          case 62:
            _context4.next = 67;
            break;

          case 64:
            _context4.prev = 64;
            _context4.t4 = _context4["catch"](27);
            logger.error("Skipping node \u2013 ".concat(item._id.replace(baseUrl, ''), " (").concat(_context4.t4, ")"));

          case 67:
            _iteratorNormalCompletion5 = true;
            _context4.next = 25;
            break;

          case 70:
            _context4.next = 76;
            break;

          case 72:
            _context4.prev = 72;
            _context4.t5 = _context4["catch"](23);
            _didIteratorError5 = true;
            _iteratorError5 = _context4.t5;

          case 76:
            _context4.prev = 76;
            _context4.prev = 77;

            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
              _iterator5.return();
            }

          case 79:
            _context4.prev = 79;

            if (!_didIteratorError5) {
              _context4.next = 82;
              break;
            }

            throw _iteratorError5;

          case 82:
            return _context4.finish(79);

          case 83:
            return _context4.finish(76);

          case 84:
            _context4.next = 302;
            break;

          case 86:
            // Iterating all nodes seem to be common way to list cached nodes
            nodesById = getNodes().filter(function (n) {
              return n.internal.owner === "gatsby-source-plone";
            }).reduce(function (map, node) {
              return map.set(node.id, node);
            }, new Map());
            updateNodes = new Set();
            updateParents = new Set();
            logger.info('Resolving new and changed nodes');
            _iteratorNormalCompletion6 = true;
            _didIteratorError6 = false;
            _iteratorError6 = undefined;
            _context4.prev = 93;

            for (_iterator6 = plone.items[Symbol.iterator](); !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              _item = _step6.value;

              if (!nodesById.has(_item._id)) {
                // Fetch new node
                updateNodes.add(_item._id);
                updateParents.add((0, _utils.parentId)(_item._id));
              } else if (state.lastFetched < _item.modified) {
                // Update changed node
                updateNodes.add(_item._id);
                updateParents.add((0, _utils.parentId)(_item._id));
              } else if (_item._id === baseUrl) {
                // Update "PloneSite" (at baseUrl)
                updateNodes.add(_item._id);
              } else if (_item._type === 'Collection') {
                // Update Collections
                updateNodes.add(_item._id);
              } // Remove seen nodes from the map


              nodesById.delete(_item._id);
              nodesById.delete("".concat(_item._id, "/@breadcrumbs"));
              nodesById.delete("".concat(_item._id, "/@navigation"));
            }

            _context4.next = 101;
            break;

          case 97:
            _context4.prev = 97;
            _context4.t6 = _context4["catch"](93);
            _didIteratorError6 = true;
            _iteratorError6 = _context4.t6;

          case 101:
            _context4.prev = 101;
            _context4.prev = 102;

            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
              _iterator6.return();
            }

          case 104:
            _context4.prev = 104;

            if (!_didIteratorError6) {
              _context4.next = 107;
              break;
            }

            throw _iteratorError6;

          case 107:
            return _context4.finish(104);

          case 108:
            return _context4.finish(101);

          case 109:
            logger.info('Deleting removed nodes');
            _iteratorNormalCompletion7 = true;
            _didIteratorError7 = false;
            _iteratorError7 = undefined;
            _context4.prev = 113;
            _iterator7 = nodesById.values()[Symbol.iterator]();

          case 115:
            if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
              _context4.next = 142;
              break;
            }

            _node = _step7.value;

            if (!ComponentNodeTypes.has(_node.internal.type)) {
              updateParents.add((0, _utils.parentId)(_node.id));
            }

            logger.info("Deleting node \u2013 ".concat(_node.id.replace(baseUrl, '') || '/'));
            deleteNode({
              node: _node
            });
            _iteratorNormalCompletion9 = true;
            _didIteratorError9 = false;
            _iteratorError9 = undefined;
            _context4.prev = 123;

            for (_iterator9 = (_node.children || [])[Symbol.iterator](); !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              id = _step9.value;
              child = getNode(id);

              if (child) {
                logger.info("Deleting node \u2013 ".concat(id.replace(baseUrl, '') || '/'));
                deleteNode({
                  node: child
                });
              }
            }

            _context4.next = 131;
            break;

          case 127:
            _context4.prev = 127;
            _context4.t7 = _context4["catch"](123);
            _didIteratorError9 = true;
            _iteratorError9 = _context4.t7;

          case 131:
            _context4.prev = 131;
            _context4.prev = 132;

            if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
              _iterator9.return();
            }

          case 134:
            _context4.prev = 134;

            if (!_didIteratorError9) {
              _context4.next = 137;
              break;
            }

            throw _iteratorError9;

          case 137:
            return _context4.finish(134);

          case 138:
            return _context4.finish(131);

          case 139:
            _iteratorNormalCompletion7 = true;
            _context4.next = 115;
            break;

          case 142:
            _context4.next = 148;
            break;

          case 144:
            _context4.prev = 144;
            _context4.t8 = _context4["catch"](113);
            _didIteratorError7 = true;
            _iteratorError7 = _context4.t8;

          case 148:
            _context4.prev = 148;
            _context4.prev = 149;

            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
              _iterator7.return();
            }

          case 151:
            _context4.prev = 151;

            if (!_didIteratorError7) {
              _context4.next = 154;
              break;
            }

            throw _iteratorError7;

          case 154:
            return _context4.finish(151);

          case 155:
            return _context4.finish(148);

          case 156:
            logger.info('Updating changed nodes');
            dirtyBreadcrumbs = null;
            dirtyNavigation = null;
            _iteratorNormalCompletion8 = true;
            _didIteratorError8 = false;
            _iteratorError8 = undefined;
            _context4.prev = 162;
            _iterator8 = plone.items[Symbol.iterator]();

          case 164:
            if (_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done) {
              _context4.next = 288;
              break;
            }

            _item2 = _step8.value;

            if (!updateNodes.has(_item2._id)) {
              _context4.next = 204;
              break;
            }

            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _context4.prev = 169;
            _iterator2 = (0, _asyncIterator2.default)(ploneNodeGenerator(_item2._id, token, baseUrl, expansions, backlinks));

          case 171:
            _context4.next = 173;
            return _iterator2.next();

          case 173:
            _step2 = _context4.sent;
            _iteratorNormalCompletion2 = _step2.done;
            _context4.next = 177;
            return _step2.value;

          case 177:
            _value2 = _context4.sent;

            if (_iteratorNormalCompletion2) {
              _context4.next = 185;
              break;
            }

            _node2 = _value2;
            logger.info("Creating node \u2013 ".concat(_node2.id.replace(baseUrl, '') || '/'));
            createNode(_node2);

          case 182:
            _iteratorNormalCompletion2 = true;
            _context4.next = 171;
            break;

          case 185:
            _context4.next = 191;
            break;

          case 187:
            _context4.prev = 187;
            _context4.t9 = _context4["catch"](169);
            _didIteratorError2 = true;
            _iteratorError2 = _context4.t9;

          case 191:
            _context4.prev = 191;
            _context4.prev = 192;

            if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {
              _context4.next = 196;
              break;
            }

            _context4.next = 196;
            return _iterator2.return();

          case 196:
            _context4.prev = 196;

            if (!_didIteratorError2) {
              _context4.next = 199;
              break;
            }

            throw _iteratorError2;

          case 199:
            return _context4.finish(196);

          case 200:
            return _context4.finish(191);

          case 201:
            // For updated nodes, breadcrumbs of all children must be updated
            if (_item2._id !== baseUrl) {
              // except for update baseUrl
              dirtyBreadcrumbs = dirtyBreadcrumbs === null || !_item2._id.startsWith(dirtyBreadcrumbs) ? _item2._id : dirtyBreadcrumbs;
            }

            _context4.next = 285;
            break;

          case 204:
            if (!updateParents.has(_item2._id)) {
              _context4.next = 242;
              break;
            }

            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _context4.prev = 207;
            _iterator3 = (0, _asyncIterator2.default)(ploneNodeGenerator(_item2._id, token, baseUrl, expansions, backlinks));

          case 209:
            _context4.next = 211;
            return _iterator3.next();

          case 211:
            _step3 = _context4.sent;
            _iteratorNormalCompletion3 = _step3.done;
            _context4.next = 215;
            return _step3.value;

          case 215:
            _value3 = _context4.sent;

            if (_iteratorNormalCompletion3) {
              _context4.next = 223;
              break;
            }

            _node3 = _value3;
            logger.info("Creating node \u2013 ".concat(_node3.id.replace(baseUrl, '') || '/'));
            createNode(_node3);

          case 220:
            _iteratorNormalCompletion3 = true;
            _context4.next = 209;
            break;

          case 223:
            _context4.next = 229;
            break;

          case 225:
            _context4.prev = 225;
            _context4.t10 = _context4["catch"](207);
            _didIteratorError3 = true;
            _iteratorError3 = _context4.t10;

          case 229:
            _context4.prev = 229;
            _context4.prev = 230;

            if (!(!_iteratorNormalCompletion3 && _iterator3.return != null)) {
              _context4.next = 234;
              break;
            }

            _context4.next = 234;
            return _iterator3.return();

          case 234:
            _context4.prev = 234;

            if (!_didIteratorError3) {
              _context4.next = 237;
              break;
            }

            throw _iteratorError3;

          case 237:
            return _context4.finish(234);

          case 238:
            return _context4.finish(229);

          case 239:
            // For changed parents, navigation of all children must be updated
            dirtyNavigation = dirtyNavigation === null || !_item2._id.startsWith(dirtyNavigation) ? _item2._id : dirtyNavigation;
            _context4.next = 285;
            break;

          case 242:
            logger.debug("Touching node \u2013 ".concat(_item2._id.replace(baseUrl, '') || '/'));
            touchNode({
              nodeId: _item2._id
            });
            _iteratorNormalCompletion10 = true;
            _didIteratorError10 = false;
            _iteratorError10 = undefined;
            _context4.prev = 247;

            for (_iterator10 = (getNode(_item2._id).children || [])[Symbol.iterator](); !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
              _id = _step10.value;
              logger.debug("Touching node \u2013 ".concat(_id.replace(baseUrl, '') || '/'));
              touchNode({
                nodeId: _id
              });
            }

            _context4.next = 255;
            break;

          case 251:
            _context4.prev = 251;
            _context4.t11 = _context4["catch"](247);
            _didIteratorError10 = true;
            _iteratorError10 = _context4.t11;

          case 255:
            _context4.prev = 255;
            _context4.prev = 256;

            if (!_iteratorNormalCompletion10 && _iterator10.return != null) {
              _iterator10.return();
            }

          case 258:
            _context4.prev = 258;

            if (!_didIteratorError10) {
              _context4.next = 261;
              break;
            }

            throw _iteratorError10;

          case 261:
            return _context4.finish(258);

          case 262:
            return _context4.finish(255);

          case 263:
            if (_item2._id.startsWith(dirtyBreadcrumbs)) {
              _context4.next = 268;
              break;
            }

            logger.debug("Touching node \u2013 ".concat(_item2._id.replace(baseUrl, '') || '/', "/@breadcrumbs"));
            touchNode({
              nodeId: "".concat(_item2._id, "/@breadcrumbs")
            });
            _context4.next = 274;
            break;

          case 268:
            logger.debug("Creating node \u2013 ".concat(_item2._id.replace(baseUrl, '') || '/', "/@breadcrumbs"));
            _context4.t12 = createNode;
            _context4.next = 272;
            return fetchPloneBreadcrumbsNode(_item2._id, token, baseUrl);

          case 272:
            _context4.t13 = _context4.sent;
            (0, _context4.t12)(_context4.t13);

          case 274:
            if (_item2._id.startsWith(dirtyNavigation)) {
              _context4.next = 279;
              break;
            }

            logger.debug("Touching node \u2013 ".concat(_item2._id.replace(baseUrl, '') || '/', "/@navigation"));
            touchNode({
              nodeId: "".concat(_item2._id, "/@navigation")
            });
            _context4.next = 285;
            break;

          case 279:
            logger.info("Creating node \u2013 ".concat(_item2._id.replace(baseUrl, '') || '/', "/@navigation"));
            _context4.t14 = createNode;
            _context4.next = 283;
            return fetchPloneNavigationNode(_item2._id, token, baseUrl);

          case 283:
            _context4.t15 = _context4.sent;
            (0, _context4.t14)(_context4.t15);

          case 285:
            _iteratorNormalCompletion8 = true;
            _context4.next = 164;
            break;

          case 288:
            _context4.next = 294;
            break;

          case 290:
            _context4.prev = 290;
            _context4.t16 = _context4["catch"](162);
            _didIteratorError8 = true;
            _iteratorError8 = _context4.t16;

          case 294:
            _context4.prev = 294;
            _context4.prev = 295;

            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
              _iterator8.return();
            }

          case 297:
            _context4.prev = 297;

            if (!_didIteratorError8) {
              _context4.next = 300;
              break;
            }

            throw _iteratorError8;

          case 300:
            return _context4.finish(297);

          case 301:
            return _context4.finish(294);

          case 302:
            logger.info('Setting plugin status');
            logger.debug(JSON.stringify(newState));
            setPluginStatus(newState);
            logger.info('Done');

          case 306:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[23, 72, 76, 84], [27, 64], [30, 48, 52, 62], [53,, 57, 61], [77,, 79, 83], [93, 97, 101, 109], [102,, 104, 108], [113, 144, 148, 156], [123, 127, 131, 139], [132,, 134, 138], [149,, 151, 155], [162, 290, 294, 302], [169, 187, 191, 201], [192,, 196, 200], [207, 225, 229, 239], [230,, 234, 238], [247, 251, 255, 263], [256,, 258, 262], [295,, 297, 301]]);
  }));

  return function (_x12, _x13) {
    return _ref6.apply(this, arguments);
  };
}(); // GatsbyJS transform plugin for Plone content nodes with binary attributes
// Expand file and image attributes into linked remote file nodes


exports.onCreateNode =
/*#__PURE__*/
function () {
  var _ref9 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee7(_ref7, _ref8) {
    var node, actions, cache, store, baseUrl, token, imageScale, logLevel, logger, createNode, createParentChildLink, createImageNode, createFileNode, imageNode, fileNode;
    return _regenerator.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            node = _ref7.node, actions = _ref7.actions, cache = _ref7.cache, store = _ref7.store;
            baseUrl = _ref8.baseUrl, token = _ref8.token, imageScale = _ref8.imageScale, logLevel = _ref8.logLevel;
            logger = _utils.logging.getLogger(_utils.logging[logLevel] || 100);

            if (!(node.internal.type.match(/Plone/) && !ComponentNodeTypes.has(node.internal.type))) {
              _context7.next = 33;
              break;
            }

            createNode = actions.createNode, createParentChildLink = actions.createParentChildLink; // TODO: Add argument for attribute names to check for expandable files
            // TODO: Add support for authentication; gatsby-source-filesystem supports
            //       currently only basic auth for createRemoteFileNode
            // Wrapper function for createNode
            // Adds 'png' extension to node so that gatsby-tranform-sharp recognizes it
            // Also, appends existing node.image data along with fileNode data

            createImageNode =
            /*#__PURE__*/
            function () {
              var _ref10 = (0, _asyncToGenerator2.default)(
              /*#__PURE__*/
              _regenerator.default.mark(function _callee5(fileNode, source) {
                var extension;
                return _regenerator.default.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        extension = (node.image.filename || '').split('.').splice(-1)[0];
                        createNode((0, _objectSpread2.default)({}, fileNode, node.image, {
                          parent: node.id,
                          extension: (extension || 'png').toLowerCase()
                        }), source);

                      case 2:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5, this);
              }));

              return function createImageNode(_x16, _x17) {
                return _ref10.apply(this, arguments);
              };
            }();

            createFileNode =
            /*#__PURE__*/
            function () {
              var _ref11 = (0, _asyncToGenerator2.default)(
              /*#__PURE__*/
              _regenerator.default.mark(function _callee6(fileNode, source) {
                return _regenerator.default.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        createNode((0, _objectSpread2.default)({}, fileNode, node.file, {
                          parent: node.id
                        }), source);

                      case 1:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, _callee6, this);
              }));

              return function createFileNode(_x18, _x19) {
                return _ref11.apply(this, arguments);
              };
            }();

            if (!node.image) {
              _context7.next = 20;
              break;
            }

            logger.info("Fetching image \u2013 ".concat(node.id.replace(baseUrl, '') || '/'));
            _context7.prev = 9;
            _context7.next = 12;
            return (0, _gatsbySourceFilesystem.createRemoteFileNode)({
              url: imageScale ? "".concat(node.image.download, "/").concat(imageScale) : node.image.download,
              store: store,
              cache: cache,
              createNode: createImageNode,
              createNodeId: function createNodeId() {
                return "".concat(node.id, " >> image");
              }
            });

          case 12:
            imageNode = _context7.sent;
            node.image___NODE = imageNode.id;
            createParentChildLink({
              parent: node,
              child: imageNode
            });
            _context7.next = 20;
            break;

          case 17:
            _context7.prev = 17;
            _context7.t0 = _context7["catch"](9);
            logger.warn("Error creating image node for ".concat(node.id, ": "), _context7.t0);

          case 20:
            if (!node.file) {
              _context7.next = 33;
              break;
            }

            logger.info("Fetching file \u2013 ".concat(node.id.replace(baseUrl, '') || '/'));
            _context7.prev = 22;
            _context7.next = 25;
            return (0, _gatsbySourceFilesystem.createRemoteFileNode)({
              url: node.file.download,
              store: store,
              cache: cache,
              createNode: createFileNode,
              createNodeId: function createNodeId() {
                return "".concat(node.id, " >> file");
              }
            });

          case 25:
            fileNode = _context7.sent;
            node.file___NODE = fileNode.id;
            createParentChildLink({
              parent: node,
              child: fileNode
            });
            _context7.next = 33;
            break;

          case 30:
            _context7.prev = 30;
            _context7.t1 = _context7["catch"](22);
            logger.warn("Error creating file node for ".concat(node.id, ": "), _context7.t1);

          case 33:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this, [[9, 17], [22, 30]]);
  }));

  return function (_x14, _x15) {
    return _ref9.apply(this, arguments);
  };
}();