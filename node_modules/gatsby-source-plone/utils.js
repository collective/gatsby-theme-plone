"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseHTMLtoReact = exports.normalizeData = exports.fetchPlone = exports.fetchUrl = exports.headersWithToken = exports.normalizeType = exports.normalizePath = exports.parentId = exports.urlWithoutParameters = exports.createContentDigest = exports.logging = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _index = _interopRequireDefault(require("axios/index"));

var _crypto = _interopRequireDefault(require("crypto"));

var _reactHtmlParser = _interopRequireWildcard(require("react-html-parser"));

var _reactSerialize = require("react-serialize");

// Minimal logging module mimicking Python logging module
var logging = {
  CRITICAL: 50,
  ERROR: 40,
  WARNING: 30,
  INFO: 20,
  DEBUG: 10,
  getLogger: function getLogger(logLevel) {
    var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : console;
    return {
      critical: function critical(msg) {
        return logging.CRITICAL >= logLevel ? out.error("Plone \u2013 ".concat(msg)) : null;
      },
      error: function error(msg) {
        return logging.ERROR >= logLevel ? out.error("Plone \u2013 ".concat(msg)) : null;
      },
      warn: function warn(msg) {
        return logging.WARNING >= logLevel ? out.warn("Plone \u2013 ".concat(msg)) : null;
      },
      info: function info(msg) {
        return logging.INFO >= logLevel ? out.info("Plone \u2013 ".concat(msg)) : null;
      },
      debug: function debug(msg) {
        return logging.DEBUG >= logLevel ? out.debug("Plone \u2013 ".concat(msg)) : null;
      }
    };
  }
}; // Create content digest (hash)

exports.logging = logging;

var createContentDigest = function createContentDigest(data) {
  return _crypto.default.createHash('md5').update(JSON.stringify(data)).digest('hex');
}; // Get URL without query parameters


exports.createContentDigest = createContentDigest;

var urlWithoutParameters = function urlWithoutParameters(url) {
  return url.split('?')[0];
}; // Return parent id for Plone REST API content object id


exports.urlWithoutParameters = urlWithoutParameters;

var parentId = function parentId(id) {
  return id.match(/\//g).length >= 3 ? id.split('/').slice(0, -1).join('/') : id;
}; // Normalize path


exports.parentId = parentId;

var normalizePath = function normalizePath(path) {
  return path ? path.replace(/^\/*/, '/').replace(/\/*$/, '/') : '/';
}; // Camelize


exports.normalizePath = normalizePath;

var normalizeType = function normalizeType(type) {
  type = type.replace(/(?:^\w|[A-Z]|\b\w)/g, function (letter) {
    return letter.toUpperCase();
  }).replace(/[\s\.]+/g, '');
  return type.startsWith('Plone') ? type : "Plone".concat(type);
}; // Add token to header when given


exports.normalizeType = normalizeType;

var headersWithToken = function headersWithToken(headers, token) {
  return token ? (0, _objectSpread2.default)({}, headers, {
    Authorization: "Bearer ".concat(token)
  }) : headers;
}; // Fetch JSON data from an URL


exports.headersWithToken = headersWithToken;

var fetchUrl =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(url, token, params) {
    var http,
        response,
        _args = arguments;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            http = _args.length > 3 && _args[3] !== undefined ? _args[3] : _index.default;
            _context.next = 3;
            return http.get(url, {
              headers: headersWithToken({
                Accept: 'application/json'
              }, token),
              params: params
            });

          case 3:
            response = _context.sent;
            return _context.abrupt("return", response.data || {});

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function fetchUrl(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}(); // Fetch Plone JSON REST API data with batching expanded


exports.fetchUrl = fetchUrl;

var fetchPlone =
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2(url, token, params) {
    var http,
        batch,
        data,
        _data$items,
        _args2 = arguments;

    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            http = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : _index.default;
            _context2.next = 3;
            return fetchUrl(url, token, params, http);

          case 3:
            batch = data = _context2.sent;

          case 4:
            if (!1) {
              _context2.next = 19;
              break;
            }

            if (!batch['batching']) {
              _context2.next = 16;
              break;
            }

            if (!batch['batching'].next) {
              _context2.next = 13;
              break;
            }

            _context2.next = 9;
            return fetchUrl(batch['batching'].next, token, {}, http);

          case 9:
            batch = _context2.sent;

            (_data$items = data.items).push.apply(_data$items, (0, _toConsumableArray2.default)(batch.items));

            _context2.next = 14;
            break;

          case 13:
            return _context2.abrupt("break", 19);

          case 14:
            _context2.next = 17;
            break;

          case 16:
            return _context2.abrupt("break", 19);

          case 17:
            _context2.next = 4;
            break;

          case 19:
            return _context2.abrupt("return", data);

          case 20:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function fetchPlone(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}(); // Normalize Plone JSON to be usable as such in GatsbyJS


exports.fetchPlone = fetchPlone;

var normalizeData = function normalizeData(data, baseUrl) {
  // - Adds '@id' for plone.restapi < 1.0b1 results from 'url'
  if (!data['@id'] && data.url) {
    data['@id'] = data.url;
  } // - Adds '_path' without baseUrl for objects with '@id'


  if (data['@id']) {
    // _path variables are used similarly to slugs in
    // https://www.gatsbyjs.org/tutorial/part-seven/
    data['_path'] = normalizePath(urlWithoutParameters(data['@id']).split(baseUrl)[1]);
  } // - Handle '@components' and 'items' recursively
  // - Prefixes reserved keys with '_'
  //   to allow them to be queried with GraphQL
  // - Replaces '@' to '_' in properties starting with '@'


  var _arr = Object.entries(data);

  for (var _i = 0; _i < _arr.length; _i++) {
    var _arr$_i = (0, _slicedToArray2.default)(_arr[_i], 2),
        key = _arr$_i[0],
        value = _arr$_i[1];

    if (key === '@components') {
      data._components = {};

      var _arr2 = Object.entries(value);

      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
        var _arr2$_i = (0, _slicedToArray2.default)(_arr2[_i2], 2),
            key_ = _arr2$_i[0],
            value_ = _arr2$_i[1];

        if (value_ !== null) {
          data._components[key_] = normalizeData(value_, baseUrl);
          data._components[key_]._path = data._path;
        }
      }

      delete data[key];
    } else if (key === 'items' && value) {
      data[key] = value.map(function (item) {
        return normalizeData(item, baseUrl);
      });
    } else if (new Set(['id', 'parent', 'children']).has(key)) {
      if (key === 'parent') {
        data["_".concat(key)] = normalizeData(value, baseUrl);
      } else {
        data["_".concat(key)] = value;
      }

      delete data[key];
    } else if (key.length && key[0] === '@') {
      if (key === 'id') {
        data.id = value;
      } else {
        data['_' + key.slice(1)] = value;
      }

      delete data[key];
    }
  }

  return data;
}; // Process HTML data using react-html-parser


exports.normalizeData = normalizeData;

var parseHTMLtoReact = function parseHTMLtoReact(html, baseUrl, path, backlinks) {
  var transform = function transform(node, index) {
    // Replace hyperlinks with relative links
    if (node.type === 'tag' && node.name === 'a') {
      if (node.attribs.href && node.attribs.href.startsWith(baseUrl)) {
        node.attribs.to = normalizePath(node.attribs.href.split(baseUrl)[1]);
        node.attribs.href = null;
        node.name = 'Link';

        if (!backlinks.has(node.attribs.to)) {
          backlinks.set(node.attribs.to, [path]);
        } else {
          backlinks.get(node.attribs.to).push(path);
        }

        return (0, _reactHtmlParser.convertNodeToElement)(node, index, transform);
      }
    } // Replace image src with relative paths


    if (node.type === 'tag' && node.name === 'img') {
      if (node.attribs.src && node.attribs.src.startsWith(baseUrl)) {
        node.attribs.src = normalizePath(node.attribs.src.split(baseUrl)[1].split('/@@images')[0]);
        node.name = 'Img';

        if (!backlinks.has(node.attribs.src)) {
          backlinks.set(node.attribs.src, [path]);
        } else {
          backlinks.get(node.attribs.src).push(path);
        }

        return (0, _reactHtmlParser.convertNodeToElement)(node, index, transform);
      }
    }
  };

  var options = {
    decodeEntities: true,
    transform: transform
  };
  return (0, _reactSerialize.serialize)((0, _reactHtmlParser.default)(html, options));
};

exports.parseHTMLtoReact = parseHTMLtoReact;