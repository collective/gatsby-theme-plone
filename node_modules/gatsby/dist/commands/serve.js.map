{"version":3,"sources":["../../src/commands/serve.js"],"names":["path","require","openurl","fs","signalExit","compression","express","getConfigFile","preferDefault","chalk","reachMatch","match","getPages","directory","readFile","join","then","contents","JSON","parse","catch","clientOnlyPathsRouter","pages","options","clientOnlyRoutes","filter","page","matchPath","req","res","next","url","accepts","route","find","clientRoute","sendFile","err","module","exports","program","prefixPaths","port","open","host","parseInt","config","pathPrefix","root","app","router","Router","use","static","status","server","listen","openUrlString","console","log","blue","bold","Promise","resolve","yellow","close"],"mappings":"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","sourcesContent":["/* @flow weak */\nconst path = require(`path`)\nconst openurl = require(`better-opn`)\nconst fs = require(`fs-extra`)\nconst signalExit = require(`signal-exit`)\nconst compression = require(`compression`)\nconst express = require(`express`)\nconst getConfigFile = require(`../bootstrap/get-config-file`)\nconst preferDefault = require(`../bootstrap/prefer-default`)\nconst chalk = require(`chalk`)\nconst { match: reachMatch } = require(`@reach/router/lib/utils`)\n\nconst getPages = directory =>\n  fs\n    .readFile(path.join(directory, `.cache`, `pages.json`))\n    .then(contents => JSON.parse(contents))\n    .catch(() => [])\n\nconst clientOnlyPathsRouter = (pages, options) => {\n  const clientOnlyRoutes = pages.filter(page => page.matchPath)\n  return (req, res, next) => {\n    const { url } = req\n    if (req.accepts(`html`)) {\n      const route = clientOnlyRoutes.find(\n        clientRoute => reachMatch(clientRoute.matchPath, url) !== null\n      )\n      if (route && route.path) {\n        return res.sendFile(\n          path.join(route.path, `index.html`),\n          options,\n          err => {\n            if (err) {\n              next()\n            }\n          }\n        )\n      }\n    }\n    return next()\n  }\n}\n\nmodule.exports = async program => {\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const config = await preferDefault(\n    getConfigFile(program.directory, `gatsby-config`)\n  )\n\n  let pathPrefix = config && config.pathPrefix\n  pathPrefix = prefixPaths && pathPrefix ? pathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n  const pages = await getPages(program.directory)\n\n  const app = express()\n  const router = express.Router()\n  router.use(compression())\n  router.use(express.static(`public`))\n  router.use(clientOnlyPathsRouter(pages, { root }))\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      return res.status(404).sendFile(`404.html`, { root })\n    }\n    return next()\n  })\n  app.use(pathPrefix, router)\n\n  const server = app.listen(port, host, () => {\n    let openUrlString = `http://${host}:${port}${pathPrefix}`\n    console.log(\n      `${chalk.blue(`info`)} gatsby serve running at: ${chalk.bold(\n        openUrlString\n      )}`\n    )\n    if (open) {\n      console.log(`${chalk.blue(`info`)} Opening browser...`)\n      Promise.resolve(openurl(openUrlString)).catch(err =>\n        console.log(\n          `${chalk.yellow(\n            `warn`\n          )} Browser not opened because no browser was found`\n        )\n      )\n    }\n  })\n\n  signalExit(() => server.close())\n}\n"],"file":"serve.js"}