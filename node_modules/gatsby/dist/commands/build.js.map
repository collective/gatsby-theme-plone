{"version":3,"sources":["../../src/commands/build.js"],"names":["report","require","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDir","initTracer","stopTracer","chalk","tracer","globalTracer","reportFailure","msg","err","log","panic","module","exports","program","openTracingConfigFile","buildSpan","startSpan","setTag","directory","parentSpan","graphqlRunner","graphql","activity","activityTimer","start","catch","end","stripIndent","context","path","bold","info","process","uptime","finish","build"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { copyStaticDir } = require(`../utils/get-static-dir`)\nconst { initTracer, stopTracer } = require(`../utils/tracer`)\nconst chalk = require(`chalk`)\nconst tracer = require(`opentracing`).globalTracer()\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  prefixPaths: boolean,\n  noUglify: boolean,\n  openTracingConfigFile: string,\n}\n\nmodule.exports = async function build(program: BuildArgs) {\n  initTracer(program.openTracingConfigFile)\n\n  const buildSpan = tracer.startSpan(`build`)\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { graphqlRunner } = await bootstrap({\n    ...program,\n    parentSpan: buildSpan,\n  })\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDir()\n\n  let activity\n  activity = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  activity.start()\n  await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building static HTML for pages`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  await buildHTML(program, activity).catch(err => {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML failed${\n          err.context && err.context.path\n            ? ` for path \"${chalk.bold(err.context.path)}\"`\n            : ``\n        }\n\n        See our docs page on debugging HTML builds for help https://gatsby.app/debug-html\n      `,\n      err\n    )\n  })\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n\n  await stopTracer()\n}\n"],"file":"build.js"}