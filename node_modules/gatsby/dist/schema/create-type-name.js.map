{"version":3,"sources":["../../src/schema/create-type-name.js"],"names":["_","require","seenNames","Map","typeNameRestriction","module","exports","createTypeName","name","cameledName","camelCase","match","has","set","get","clearTypeNames","clear"],"mappings":";;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AAEA,MAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AAEA,MAAMC,mBAAmB,GAAG,0BAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC7C,MAAIC,WAAW,GAAGT,CAAC,CAACU,SAAF,CAAYF,IAAZ,CAAlB,CAD6C,CAG7C;AACA;AACA;;;AACA,MAAI,CAACC,WAAW,CAACE,KAAZ,CAAkBP,mBAAlB,CAAL,EAA6C;AAC3CK,IAAAA,WAAW,GAAI,GAAD,GAAMA,WAApB;AACD;;AAED,MAAIP,SAAS,CAACU,GAAV,CAAcH,WAAd,CAAJ,EAAgC;AAC9BP,IAAAA,SAAS,CAACW,GAAV,CAAcJ,WAAd,EAA2BP,SAAS,CAACY,GAAV,CAAcL,WAAd,IAA6B,CAAxD;AACA,WAAQ,GAAEA,WAAY,IAAGP,SAAS,CAACY,GAAV,CAAcL,WAAd,CAA2B,EAApD;AACD,GAHD,MAGO;AACLP,IAAAA,SAAS,CAACW,GAAV,CAAcJ,WAAd,EAA2B,CAA3B;AACA,WAAOA,WAAP;AACD;AACF,CAjBD;;AAmBAJ,MAAM,CAACC,OAAP,CAAeS,cAAf,GAAgC,MAAM;AACpCb,EAAAA,SAAS,CAACc,KAAV;AACD,CAFD","sourcesContent":["const _ = require(`lodash`)\n\nconst seenNames = new Map()\n\nconst typeNameRestriction = /^[_a-zA-Z][_a-zA-Z0-9]*$/\n\nmodule.exports = function createTypeName(name) {\n  let cameledName = _.camelCase(name)\n\n  // camelCasing will ensure that name is build from just alphanumeric\n  // characters, but we still need to ensure that type name\n  // doesn't start with number (graphql resitriction)\n  if (!cameledName.match(typeNameRestriction)) {\n    cameledName = `_` + cameledName\n  }\n\n  if (seenNames.has(cameledName)) {\n    seenNames.set(cameledName, seenNames.get(cameledName) + 1)\n    return `${cameledName}_${seenNames.get(cameledName)}`\n  } else {\n    seenNames.set(cameledName, 1)\n    return cameledName\n  }\n}\n\nmodule.exports.clearTypeNames = () => {\n  seenNames.clear()\n}\n"],"file":"create-type-name.js"}