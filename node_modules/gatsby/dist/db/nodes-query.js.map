{"version":3,"sources":["../../src/db/nodes-query.js"],"names":["backend","process","env","GATSBY_DB_NODES","lokiRunQuery","require","siftRunQuery","lazyFields","chooseQueryEngine","args","queryArgs","gqlType","filter","contains","run","queryFunction","module","exports"],"mappings":";;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAAZ,IAAgC,OAAhD;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAE,oBAAF,CAA5B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAE,mBAAF,CAA5B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAE,uBAAF,CAA1B;;AAEA,SAASG,iBAAT,CAA2BC,IAA3B,EAAiC;AAAA,QACvBC,SADuB,GACAD,IADA,CACvBC,SADuB;AAAA,QACZC,OADY,GACAF,IADA,CACZE,OADY;AAAA,QAEvBC,MAFuB,GAEZF,SAFY,CAEvBE,MAFuB;;AAG/B,MAAIZ,OAAO,KAAM,MAAb,IAAsB,CAACO,UAAU,CAACM,QAAX,CAAoBD,MAApB,EAA4BD,OAA5B,CAA3B,EAAiE;AAC/D,WAAOP,YAAP;AACD,GAFD,MAEO;AACL,WAAOE,YAAP;AACD;AACF;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAASQ,GAAT,CAAaL,IAAb,EAAmB;AACjB,QAAMM,aAAa,GAAGP,iBAAiB,CAACC,IAAD,CAAvC;AAEA,SAAOM,aAAa,CAACN,IAAD,CAApB;AACD;;AAEDO,MAAM,CAACC,OAAP,CAAeH,GAAf,GAAqBA,GAArB","sourcesContent":["const backend = process.env.GATSBY_DB_NODES || `redux`\nconst lokiRunQuery = require(`./loki/nodes-query`)\nconst siftRunQuery = require(`../redux/run-sift`)\nconst lazyFields = require(`../schema/lazy-fields`)\n\nfunction chooseQueryEngine(args) {\n  const { queryArgs, gqlType } = args\n  const { filter } = queryArgs\n  if (backend === `loki` && !lazyFields.contains(filter, gqlType)) {\n    return lokiRunQuery\n  } else {\n    return siftRunQuery\n  }\n}\n\n/**\n * Runs the query over all nodes of type. It must first select the\n * appropriate query engine. Sift, or Loki. Sift is used by default,\n * or if the query includes \"lazy fields\", those that need to be\n * resolved before being queried. These could be either plugin fields,\n * i.e those declared by plugins during the\n * `setFieldsOnGraphQLNodeType` API, or they could be linked\n * fields. See `../redux/run-sift.js` for more.\n *\n * If the query does *not* include lazy fields, and environment\n * variable `GATSBY_DB_NODES` = `loki` then we can perform a much\n * faster pure data query using loki. See `loki/nodes-query.js` for\n * more.\n *\n * @param {Object} args. Object with:\n *\n * {Object} gqlType: built during `./build-node-types.js`\n *\n * {Object} queryArgs: The raw graphql query as a js object. E.g `{\n * filter: { fields { slug: { eq: \"/somepath\" } } } }`\n *\n * {Object} context: The context from the QueryJob\n *\n * {boolean} firstOnly: Whether to return the first found match, or\n * all matching result.\n *\n * @returns {promise} A promise that will eventually be resolved with\n * a collection of matching objects (even if `firstOnly` is true, in\n * which case it will be a collection of length 1 or zero)\n */\nfunction run(args) {\n  const queryFunction = chooseQueryEngine(args)\n\n  return queryFunction(args)\n}\n\nmodule.exports.run = run\n"],"file":"nodes-query.js"}