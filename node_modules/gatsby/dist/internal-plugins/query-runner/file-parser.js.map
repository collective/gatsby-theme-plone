{"version":3,"sources":["../../../src/internal-plugins/query-runner/file-parser.js"],"names":["fs","require","crypto","_","getGraphQLTag","report","apiRunnerNode","generateQueryName","def","hash","file","name","value","camelCase","kind","warnForUnknownQueryVariable","varName","usageFunction","warn","parseToAst","filePath","fileStr","ast","transpiled","filename","contents","length","item","tmp","error","undefined","warnForGlobalTag","findGraphQLTags","text","Promise","resolve","reject","then","queries","documentLocations","WeakMap","extractStaticQuery","taggedTemplateExpressPath","isHook","gqlAst","isGlobal","definitions","forEach","set","node","start","loc","map","d","isStaticQuery","push","JSXElement","path","openingElement","traverse","JSXAttribute","jsxPath","TaggedTemplateExpression","templatePath","Identifier","identifierPath","found","VariableDeclarator","varPath","id","init","type","CallExpression","hookPath","callee","get","referencesImport","ExportNamedDeclaration","state","innerPath","uniqueQueries","uniqBy","q","catch","cache","FileParser","parseFile","readFile","err","indexOf","createHash","update","digest","astDefinitions","parseFiles","files","documents","Map","all","doc"],"mappings":"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","sourcesContent":["// @flow\nconst fs = require(`fs-extra`)\nconst crypto = require(`crypto`)\nconst _ = require(`lodash`)\n\n// Traverse is a es6 module...\nimport traverse from \"@babel/traverse\"\nconst getGraphQLTag = require(`babel-plugin-remove-graphql-queries`)\n  .getGraphQLTag\nconst report = require(`gatsby-cli/lib/reporter`)\n\nimport type { DocumentNode, DefinitionNode } from \"graphql\"\nimport { babelParseToAst } from \"../../utils/babel-parse-to-ast\"\n\nconst apiRunnerNode = require(`../../utils/api-runner-node`)\n\n/**\n * Add autogenerated query name if it wasn't defined by user.\n */\nconst generateQueryName = ({ def, hash, file }) => {\n  if (!def.name || !def.name.value) {\n    def.name = {\n      value: `${_.camelCase(file)}${hash}`,\n      kind: `Name`,\n    }\n  }\n  return def\n}\n\nconst warnForUnknownQueryVariable = (varName, file, usageFunction) =>\n  report.warn(\n    `\\nWe were unable to find the declaration of variable \"${varName}\", which you passed as the \"query\" prop into the ${usageFunction} declaration in \"${file}\".\n\nPerhaps the variable name has a typo?\n\nAlso note that we are currently unable to use queries defined in files other than the file where the ${usageFunction} is defined. If you're attempting to import the query, please move it into \"${file}\". If being able to import queries from another file is an important capability for you, we invite your help fixing it.\\n`\n  )\n\nasync function parseToAst(filePath, fileStr) {\n  let ast\n\n  // Preprocess and attempt to parse source; return an AST if we can, log an\n  // error if we can't.\n  const transpiled = await apiRunnerNode(`preprocessSource`, {\n    filename: filePath,\n    contents: fileStr,\n  })\n  if (transpiled && transpiled.length) {\n    for (const item of transpiled) {\n      try {\n        const tmp = babelParseToAst(item, filePath)\n        ast = tmp\n        break\n      } catch (error) {\n        report.error(error)\n        continue\n      }\n    }\n    if (ast === undefined) {\n      report.error(`Failed to parse preprocessed file ${filePath}`)\n    }\n  } else {\n    try {\n      ast = babelParseToAst(fileStr, filePath)\n    } catch (error) {\n      report.error(\n        `There was a problem parsing \"${filePath}\"; any GraphQL ` +\n          `fragments or queries in this file were not processed. \\n` +\n          `This may indicate a syntax error in the code, or it may be a file type ` +\n          `that Gatsby does not know how to parse.`\n      )\n    }\n  }\n\n  return ast\n}\n\nconst warnForGlobalTag = file =>\n  report.warn(\n    `Using the global \\`graphql\\` tag is deprecated, and will not be supported in v3.\\n` +\n      `Import it instead like:  import { graphql } from 'gatsby' in file:\\n` +\n      file\n  )\n\nasync function findGraphQLTags(file, text): Promise<Array<DefinitionNode>> {\n  return new Promise((resolve, reject) => {\n    parseToAst(file, text)\n      .then(ast => {\n        let queries = []\n        if (!ast) {\n          resolve(queries)\n          return\n        }\n\n        /**\n         * A map of graphql documents to unique locations.\n         *\n         * A graphql document's unique location is made of:\n         *\n         *  - the location of the graphql template literal that contains the document, and\n         *  - the document's location within the graphql template literal\n         *\n         * This is used to prevent returning duplicated documents.\n         */\n        const documentLocations = new WeakMap()\n\n        const extractStaticQuery = (\n          taggedTemplateExpressPath,\n          isHook = false\n        ) => {\n          const { ast: gqlAst, text, hash, isGlobal } = getGraphQLTag(\n            taggedTemplateExpressPath\n          )\n          if (!gqlAst) return\n\n          if (isGlobal) warnForGlobalTag(file)\n\n          gqlAst.definitions.forEach(def => {\n            documentLocations.set(\n              def,\n              `${taggedTemplateExpressPath.node.start}-${def.loc.start}`\n            )\n            generateQueryName({\n              def,\n              hash,\n              file,\n            })\n          })\n\n          const definitions = [...gqlAst.definitions].map(d => {\n            d.isStaticQuery = true\n            d.isHook = isHook\n            d.text = text\n            d.hash = hash\n            return d\n          })\n\n          queries.push(...definitions)\n        }\n\n        // Look for queries in <StaticQuery /> elements.\n        traverse(ast, {\n          JSXElement(path) {\n            if (path.node.openingElement.name.name !== `StaticQuery`) {\n              return\n            }\n\n            // astexplorer.com link I (@kyleamathews) used when prototyping this algorithm\n            // https://astexplorer.net/#/gist/ab5d71c0f08f287fbb840bf1dd8b85ff/2f188345d8e5a4152fe7c96f0d52dbcc6e9da466\n            path.traverse({\n              JSXAttribute(jsxPath) {\n                if (jsxPath.node.name.name !== `query`) {\n                  return\n                }\n                jsxPath.traverse({\n                  // Assume the query is inline in the component and extract that.\n                  TaggedTemplateExpression(templatePath) {\n                    extractStaticQuery(templatePath)\n                  },\n                  // Also see if it's a variable that's passed in as a prop\n                  // and if it is, go find it.\n                  Identifier(identifierPath) {\n                    if (identifierPath.node.name !== `graphql`) {\n                      const varName = identifierPath.node.name\n                      let found = false\n                      traverse(ast, {\n                        VariableDeclarator(varPath) {\n                          if (\n                            varPath.node.id.name === varName &&\n                            varPath.node.init.type ===\n                              `TaggedTemplateExpression`\n                          ) {\n                            varPath.traverse({\n                              TaggedTemplateExpression(templatePath) {\n                                found = true\n                                extractStaticQuery(templatePath)\n                              },\n                            })\n                          }\n                        },\n                      })\n                      if (!found) {\n                        warnForUnknownQueryVariable(\n                          varName,\n                          file,\n                          `<StaticQuery>`\n                        )\n                      }\n                    }\n                  },\n                })\n              },\n            })\n            return\n          },\n        })\n\n        // Look for queries in useStaticQuery hooks.\n        traverse(ast, {\n          CallExpression(hookPath) {\n            if (\n              hookPath.node.callee.name !== `useStaticQuery` ||\n              !hookPath.get(`callee`).referencesImport(`gatsby`)\n            ) {\n              return\n            }\n\n            hookPath.traverse({\n              // Assume the query is inline in the component and extract that.\n              TaggedTemplateExpression(templatePath) {\n                extractStaticQuery(templatePath, true)\n              },\n              // // Also see if it's a variable that's passed in as a prop\n              // // and if it is, go find it.\n              Identifier(identifierPath) {\n                if (\n                  identifierPath.node.name !== `graphql` &&\n                  identifierPath.node.name !== `useStaticQuery`\n                ) {\n                  const varName = identifierPath.node.name\n                  let found = false\n                  traverse(ast, {\n                    VariableDeclarator(varPath) {\n                      if (\n                        varPath.node.id.name === varName &&\n                        varPath.node.init.type === `TaggedTemplateExpression`\n                      ) {\n                        varPath.traverse({\n                          TaggedTemplateExpression(templatePath) {\n                            found = true\n                            extractStaticQuery(templatePath, true)\n                          },\n                        })\n                      }\n                    },\n                  })\n                  if (!found) {\n                    warnForUnknownQueryVariable(varName, file, `useStaticQuery`)\n                  }\n                }\n              },\n            })\n          },\n        })\n\n        // Look for exported page queries\n        traverse(ast, {\n          ExportNamedDeclaration(path, state) {\n            path.traverse({\n              TaggedTemplateExpression(innerPath) {\n                const { ast: gqlAst, isGlobal, hash } = getGraphQLTag(innerPath)\n                if (!gqlAst) return\n\n                if (isGlobal) warnForGlobalTag(file)\n\n                gqlAst.definitions.forEach(def => {\n                  documentLocations.set(\n                    def,\n                    `${innerPath.node.start}-${def.loc.start}`\n                  )\n                  generateQueryName({\n                    def,\n                    hash,\n                    file,\n                  })\n                })\n\n                queries.push(...gqlAst.definitions)\n              },\n            })\n          },\n        })\n\n        // Remove duplicate queries\n        const uniqueQueries = _.uniqBy(queries, q => documentLocations.get(q))\n\n        resolve(uniqueQueries)\n      })\n      .catch(reject)\n  })\n}\n\nconst cache = {}\n\nexport default class FileParser {\n  async parseFile(file: string): Promise<?DocumentNode> {\n    let text\n    try {\n      text = await fs.readFile(file, `utf8`)\n    } catch (err) {\n      report.error(`There was a problem reading the file: ${file}`, err)\n      return null\n    }\n\n    if (text.indexOf(`graphql`) === -1) return null\n    const hash = crypto\n      .createHash(`md5`)\n      .update(file)\n      .update(text)\n      .digest(`hex`)\n\n    try {\n      let astDefinitions =\n        cache[hash] || (cache[hash] = await findGraphQLTags(file, text))\n\n      return astDefinitions.length\n        ? {\n            kind: `Document`,\n            definitions: astDefinitions,\n          }\n        : null\n    } catch (err) {\n      report.error(\n        `There was a problem parsing the GraphQL query in file: ${file}`,\n        err\n      )\n      return null\n    }\n  }\n\n  async parseFiles(files: Array<string>): Promise<Map<string, DocumentNode>> {\n    const documents = new Map()\n\n    return Promise.all(\n      files.map(file =>\n        this.parseFile(file).then(doc => {\n          if (!doc) return\n          documents.set(file, doc)\n        })\n      )\n    ).then(() => documents)\n  }\n}\n"],"file":"file-parser.js"}