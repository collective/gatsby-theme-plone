{"version":3,"sources":["../../../src/internal-plugins/query-runner/page-query-runner.js"],"names":["_","require","queue","store","emitter","queuedDirtyActions","active","running","runQueriesForPathnamesQueue","Set","exports","queueQueryForPathname","pathname","add","runInitialQueries","runQueries","uniq","a","payload","id","dirtyIds","findDirtyIds","cleanIds","findIdsWithoutDataDependencies","pathnamesToRun","clear","runQueriesForPathnames","on","action","push","contextModified","path","runQueuedActions","length","seenIdsWithoutDataDependencies","filter","p","state","getState","allTrackedIds","flatten","concat","values","componentDataDependencies","nodes","connections","notTrackedIds","difference","Array","from","pages","staticQueryComponents","map","c","jsonName","pathnames","staticQueries","slice","pageQueries","forEach","staticQueryComponent","get","queryJob","hash","query","componentPath","context","didNotQueueItems","page","components","isPage","Promise","resolve","onDrain","removeListener","actions","uniqDirties","reduce","node","internal","type","compact"],"mappings":"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","sourcesContent":["// @flow\n\nimport type { QueryJob } from \"../query-runner\"\n\n/**\n * Jobs of this module\n * - Ensure on bootstrap that all invalid page queries are run and report\n *   when this is done\n * - Watch for when a page's query is invalidated and re-run it.\n */\n\nconst _ = require(`lodash`)\n\nconst queue = require(`./query-queue`)\nconst { store, emitter } = require(`../../redux`)\n\nlet queuedDirtyActions = []\n\nlet active = false\nlet running = false\n\nconst runQueriesForPathnamesQueue = new Set()\nexports.queueQueryForPathname = pathname => {\n  runQueriesForPathnamesQueue.add(pathname)\n}\n\n// Do initial run of graphql queries during bootstrap.\n// Afterwards we listen \"API_RUNNING_QUEUE_EMPTY\" and check\n// for dirty nodes before running queries.\nexports.runInitialQueries = async () => {\n  await runQueries()\n\n  active = true\n  return\n}\n\nconst runQueries = async () => {\n  // Find paths dependent on dirty nodes\n  queuedDirtyActions = _.uniq(queuedDirtyActions, a => a.payload.id)\n  const dirtyIds = findDirtyIds(queuedDirtyActions)\n  queuedDirtyActions = []\n\n  // Find ids without data dependencies (i.e. no queries have been run for\n  // them before) and run them.\n  const cleanIds = findIdsWithoutDataDependencies()\n\n  // Construct paths for all queries to run\n  const pathnamesToRun = _.uniq([\n    ...runQueriesForPathnamesQueue,\n    ...dirtyIds,\n    ...cleanIds,\n  ])\n\n  runQueriesForPathnamesQueue.clear()\n\n  // Run these paths\n  await runQueriesForPathnames(pathnamesToRun)\n  return\n}\n\nemitter.on(`CREATE_NODE`, action => {\n  queuedDirtyActions.push(action)\n})\n\nemitter.on(`DELETE_NODE`, action => {\n  queuedDirtyActions.push({ payload: action.payload })\n})\n\nemitter.on(`CREATE_PAGE`, action => {\n  if (action.contextModified) {\n    exports.queueQueryForPathname(action.payload.path)\n  }\n})\n\nconst runQueuedActions = async () => {\n  if (active && !running) {\n    try {\n      running = true\n      await runQueries()\n    } finally {\n      running = false\n      if (queuedDirtyActions.length > 0) {\n        runQueuedActions()\n      }\n    }\n  }\n}\nexports.runQueuedActions = runQueuedActions\n\n// Wait until all plugins have finished running (e.g. various\n// transformer plugins) before running queries so we don't\n// query things in a 1/2 finished state.\nemitter.on(`API_RUNNING_QUEUE_EMPTY`, runQueuedActions)\n\nlet seenIdsWithoutDataDependencies = []\n\n// Remove pages from seenIdsWithoutDataDependencies when they're deleted\n// so their query will be run again if they're created again.\nemitter.on(`DELETE_PAGE`, action => {\n  seenIdsWithoutDataDependencies = seenIdsWithoutDataDependencies.filter(\n    p => p !== action.payload.path\n  )\n})\n\nconst findIdsWithoutDataDependencies = () => {\n  const state = store.getState()\n  const allTrackedIds = _.uniq(\n    _.flatten(\n      _.concat(\n        _.values(state.componentDataDependencies.nodes),\n        _.values(state.componentDataDependencies.connections)\n      )\n    )\n  )\n\n  // Get list of paths not already tracked and run the queries for these\n  // paths.\n  const notTrackedIds = _.difference(\n    [\n      ...Array.from(state.pages.values(), p => p.path),\n      ...[...state.staticQueryComponents.values()].map(c => c.jsonName),\n    ],\n    [...allTrackedIds, ...seenIdsWithoutDataDependencies]\n  )\n\n  // Add new IDs to our seen array so we don't keep trying to run queries for them.\n  // Pages without queries can't be tracked.\n  seenIdsWithoutDataDependencies = _.uniq([\n    ...notTrackedIds,\n    ...seenIdsWithoutDataDependencies,\n  ])\n\n  return notTrackedIds\n}\n\nconst runQueriesForPathnames = pathnames => {\n  const staticQueries = pathnames.filter(p => p.slice(0, 4) === `sq--`)\n  const pageQueries = pathnames.filter(p => p.slice(0, 4) !== `sq--`)\n  const state = store.getState()\n\n  staticQueries.forEach(id => {\n    const staticQueryComponent = store.getState().staticQueryComponents.get(id)\n    const queryJob: QueryJob = {\n      id: staticQueryComponent.hash,\n      hash: staticQueryComponent.hash,\n      jsonName: staticQueryComponent.jsonName,\n      query: staticQueryComponent.query,\n      componentPath: staticQueryComponent.componentPath,\n      context: { path: staticQueryComponent.jsonName },\n    }\n    queue.push(queryJob)\n  })\n\n  const pages = state.pages\n  let didNotQueueItems = true\n  pageQueries.forEach(id => {\n    const page = pages.get(id)\n    if (page) {\n      didNotQueueItems = false\n      queue.push(\n        ({\n          id: page.path,\n          jsonName: page.jsonName,\n          query: store.getState().components.get(page.componentPath).query,\n          isPage: true,\n          componentPath: page.componentPath,\n          context: {\n            ...page,\n            ...page.context,\n          },\n        }: QueryJob)\n      )\n    }\n  })\n\n  if (didNotQueueItems || !pathnames || pathnames.length === 0) {\n    return Promise.resolve()\n  }\n\n  return new Promise(resolve => {\n    const onDrain = () => {\n      queue.removeListener(`drain`, onDrain)\n      resolve()\n    }\n    queue.on(`drain`, onDrain)\n  })\n}\n\nconst findDirtyIds = actions => {\n  const state = store.getState()\n  const uniqDirties = _.uniq(\n    actions.reduce((dirtyIds, action) => {\n      const node = action.payload\n\n      if (!node || !node.id || !node.internal.type) return dirtyIds\n\n      // Find components that depend on this node so are now dirty.\n      dirtyIds = dirtyIds.concat(state.componentDataDependencies.nodes[node.id])\n\n      // Find connections that depend on this node so are now invalid.\n      dirtyIds = dirtyIds.concat(\n        state.componentDataDependencies.connections[node.internal.type]\n      )\n\n      return _.compact(dirtyIds)\n    }, [])\n  )\n  return uniqDirties\n}\n"],"file":"page-query-runner.js"}